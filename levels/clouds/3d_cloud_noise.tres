[gd_resource type="VisualShader" load_steps=25 format=3 uid="uid://deuypa3mfgm0q"]

[sub_resource type="VisualShaderNodeTexture3DParameter" id="VisualShaderNodeTexture3DParameter_6yg8n"]
parameter_name = "dNoise"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_npri2"]
source = 5

[sub_resource type="VisualShaderNodeRandomRange" id="VisualShaderNodeRandomRange_es0gg"]
default_input_values = [0, Vector3(1, 1, 1), 1, -1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_d71qh"]
input_name = "time"

[sub_resource type="VisualShaderNodeRandomRange" id="VisualShaderNodeRandomRange_8smyd"]
default_input_values = [0, Vector3(1, 1, 1), 1, -1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeRandomRange" id="VisualShaderNodeRandomRange_pkjt0"]
default_input_values = [0, Vector3(1, 1, 1), 1, -1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_pss8q"]
function = 0

[sub_resource type="VisualShaderNodeTexture3D" id="VisualShaderNodeTexture3D_60moi"]
source = 1

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_deb7x"]
function = 20

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_s27pq"]
function = 2

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_uc1o6"]
parameter_name = "sizemult"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_d2hue"]
default_input_values = [0, 0.0, 1, 10.0]
operator = 2

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_edrbk"]
parameter_name = "scale"

[sub_resource type="VisualShaderNodeBooleanConstant" id="VisualShaderNodeBooleanConstant_mkojo"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_la1ju"]
operator = 3

[sub_resource type="VisualShaderNodeTexture3DParameter" id="VisualShaderNodeTexture3DParameter_2wlkh"]
parameter_name = "NoiseTex"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_20u8d"]
default_input_values = [0, 1.0, 1, 10.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_ijckd"]
parameter_name = "brightness_mult"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_csay4"]
output_port_for_preview = 0
expanded_output_ports = [0]
input_name = "custom"

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_ywvfi"]
default_input_values = [0, 0.0, 1, 0.5, 2, 1e-05]
function = 4

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5p0yu"]
parameter_name = "display_threwhold"
hint = 1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_x12g5"]
default_input_values = [0, 1.0, 1, 10.0]
operator = 1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_0c1qg"]
default_input_values = [0, 1.0, 1, 10.0]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_1ghh2"]
default_input_values = [0, 0.0, 1, 0.0, 2, 0.0, 3, 0.0]

[resource]
code = "shader_type particles;
uniform float display_threwhold : hint_range(0, 1);
uniform int sizemult;
uniform sampler3D NoiseTex;
uniform float brightness_mult;
uniform int scale;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}



// 3D Noise with friendly permission by Inigo Quilez
vec3 hash_noise_range( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// FloatParameter:37
		float n_out37p0 = display_threwhold;


// Input:16
		float n_out16p0 = TIME;


// FloatFunc:19
		float n_out19p0 = sin(n_out16p0);


// IntParameter:22
		int n_out22p0 = sizemult;


// RandomRange:18
		float n_in18p1 = -1.00000;
		float n_out18p0 = mix(n_in18p1, float(n_out22p0), hash_noise_range(vec3(n_out19p0)).x);


// FloatFunc:21
		float n_out21p0 = tan(n_out16p0);


// RandomRange:15
		float n_in15p1 = -1.00000;
		float n_out15p0 = mix(n_in15p1, float(n_out22p0), hash_noise_range(vec3(n_out21p0)).x);


// FloatFunc:20
		float n_out20p0 = acosh(n_out16p0);


// RandomRange:17
		float n_in17p1 = -1.00000;
		float n_out17p0 = mix(n_in17p1, float(n_out22p0), hash_noise_range(vec3(n_out20p0)).x);


// VectorCompose:6
		vec3 n_out6p0 = vec3(n_out18p0, n_out15p0, n_out17p0);


// VectorOp:29
		vec3 n_out29p0 = n_out6p0 / vec3(float(n_out22p0));


		vec4 n_out2p0;
// Texture3D:2
		n_out2p0 = texture(NoiseTex, n_out29p0);


// Compare:36
		bool n_out36p0 = n_out37p0 < n_out2p0.x;


// BooleanConstant:28
		bool n_out28p0 = false;


// FloatOp:39
		float n_in39p0 = 1.00000;
		float n_out39p0 = n_in39p0 - n_out2p0.x;


// FloatParameter:34
		float n_out34p0 = brightness_mult;


// FloatOp:33
		float n_out33p0 = n_out39p0 * n_out34p0;


// IntParameter:27
		int n_out27p0 = scale;


// FloatOp:26
		float n_out26p0 = n_out2p0.x * float(n_out27p0);


// StartOutput:0
		ACTIVE = n_out36p0;
		if(ACTIVE) {
			VELOCITY = vec3(n_out28p0 ? 1.0 : 0.0);
			COLOR.rgb = vec3(n_out33p0);
			COLOR.a = n_out2p0.x;
			if (RESTART_POSITION) {
				TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(n_out6p0, 1.0));
				if (RESTART_VELOCITY) {
					VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
				}
				TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
			}
			TRANSFORM *= mat4(vec4(n_out26p0, 0, 0, 0), vec4(0, n_out26p0, 0, 0), vec4(0, 0, n_out26p0, 0), vec4(0, 0, 0, 1));
		}


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture3DParameter_6yg8n")
nodes/fragment/2/position = Vector2(-200, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_npri2")
nodes/fragment/3/position = Vector2(140, 180)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2)
nodes/start/0/position = Vector2(700, -20)
nodes/start/2/node = SubResource("VisualShaderNodeTexture3D_60moi")
nodes/start/2/position = Vector2(-140, 40)
nodes/start/3/node = SubResource("VisualShaderNodeTexture3DParameter_2wlkh")
nodes/start/3/position = Vector2(-620, -120)
nodes/start/6/node = SubResource("VisualShaderNodeVectorCompose_1ghh2")
nodes/start/6/position = Vector2(460, -460)
nodes/start/15/node = SubResource("VisualShaderNodeRandomRange_es0gg")
nodes/start/15/position = Vector2(200, -460)
nodes/start/16/node = SubResource("VisualShaderNodeInput_d71qh")
nodes/start/16/position = Vector2(-380, -320)
nodes/start/17/node = SubResource("VisualShaderNodeRandomRange_8smyd")
nodes/start/17/position = Vector2(200, -340)
nodes/start/18/node = SubResource("VisualShaderNodeRandomRange_pkjt0")
nodes/start/18/position = Vector2(200, -580)
nodes/start/19/node = SubResource("VisualShaderNodeFloatFunc_pss8q")
nodes/start/19/position = Vector2(20, -560)
nodes/start/20/node = SubResource("VisualShaderNodeFloatFunc_deb7x")
nodes/start/20/position = Vector2(0, -380)
nodes/start/21/node = SubResource("VisualShaderNodeFloatFunc_s27pq")
nodes/start/21/position = Vector2(0, -460)
nodes/start/22/node = SubResource("VisualShaderNodeIntParameter_uc1o6")
nodes/start/22/position = Vector2(-620, -540)
nodes/start/26/node = SubResource("VisualShaderNodeFloatOp_d2hue")
nodes/start/26/position = Vector2(280, 520)
nodes/start/27/node = SubResource("VisualShaderNodeIntParameter_edrbk")
nodes/start/27/position = Vector2(-680, 740)
nodes/start/28/node = SubResource("VisualShaderNodeBooleanConstant_mkojo")
nodes/start/28/position = Vector2(720, -160)
nodes/start/29/node = SubResource("VisualShaderNodeVectorOp_la1ju")
nodes/start/29/position = Vector2(-120, -160)
nodes/start/33/node = SubResource("VisualShaderNodeFloatOp_20u8d")
nodes/start/33/position = Vector2(380, 180)
nodes/start/34/node = SubResource("VisualShaderNodeFloatParameter_ijckd")
nodes/start/34/position = Vector2(-620, 540)
nodes/start/35/node = SubResource("VisualShaderNodeInput_csay4")
nodes/start/35/position = Vector2(-340, -780)
nodes/start/36/node = SubResource("VisualShaderNodeCompare_ywvfi")
nodes/start/36/position = Vector2(320, -140)
nodes/start/37/node = SubResource("VisualShaderNodeFloatParameter_5p0yu")
nodes/start/37/position = Vector2(-580, 240)
nodes/start/38/node = SubResource("VisualShaderNodeFloatOp_x12g5")
nodes/start/38/position = Vector2(0, 200)
nodes/start/39/node = SubResource("VisualShaderNodeFloatOp_0c1qg")
nodes/start/39/position = Vector2(200, 100)
nodes/start/connections = PackedInt32Array(3, 0, 2, 2, 15, 0, 6, 1, 18, 0, 6, 0, 17, 0, 6, 2, 16, 0, 19, 0, 19, 0, 18, 0, 16, 0, 20, 0, 20, 0, 17, 0, 16, 0, 21, 0, 21, 0, 15, 0, 6, 0, 0, 4, 22, 0, 18, 2, 22, 0, 15, 2, 22, 0, 17, 2, 2, 0, 26, 0, 27, 0, 26, 1, 28, 0, 0, 1, 6, 0, 29, 0, 22, 0, 29, 1, 29, 0, 2, 0, 34, 0, 33, 1, 2, 0, 38, 0, 37, 0, 38, 1, 37, 0, 36, 0, 2, 0, 36, 1, 36, 0, 0, 0, 33, 0, 0, 2, 26, 0, 0, 5, 2, 0, 0, 3, 2, 0, 39, 1, 39, 0, 33, 0)
nodes/process/0/position = Vector2(580, 60)
